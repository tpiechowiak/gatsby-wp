{"version":3,"file":"gatsby-plugin-image-f434afa6cc9df8d22898.js","mappings":"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","sources":["webpack://gatsby-starter-wordpress-blog/../src/image-utils.ts","webpack://gatsby-starter-wordpress-blog/../src/components/hooks.ts","webpack://gatsby-starter-wordpress-blog/../src/components/picture.tsx","webpack://gatsby-starter-wordpress-blog/../src/components/layout-wrapper.tsx","webpack://gatsby-starter-wordpress-blog/../src/components/placeholder.tsx","webpack://gatsby-starter-wordpress-blog/../src/components/main-image.tsx","webpack://gatsby-starter-wordpress-blog/../src/components/gatsby-image.browser.tsx","webpack://gatsby-starter-wordpress-blog/../src/components/gatsby-image.server.tsx","webpack://gatsby-starter-wordpress-blog/../src/components/static-image.server.tsx","webpack://gatsby-starter-wordpress-blog/../src/components/static-image.tsx","webpack://gatsby-starter-wordpress-blog/./node_modules/gatsby-plugin-image/node_modules/camelcase/index.js"],"sourcesContent":["import camelCase from \"camelcase\"\nimport type { IGatsbyImageData } from \"./index\"\n\nconst DEFAULT_PIXEL_DENSITIES = [0.25, 0.5, 1, 2]\nexport const DEFAULT_BREAKPOINTS = [750, 1080, 1366, 1920]\nexport const EVERY_BREAKPOINT = [\n  320, 654, 768, 1024, 1366, 1600, 1920, 2048, 2560, 3440, 3840, 4096,\n]\nconst DEFAULT_FLUID_WIDTH = 800\nconst DEFAULT_FIXED_WIDTH = 800\nconst DEFAULT_ASPECT_RATIO = 4 / 3\n\nexport type Fit = \"cover\" | \"fill\" | \"inside\" | \"outside\" | \"contain\"\n\nexport type Layout = \"fixed\" | \"fullWidth\" | \"constrained\"\nexport type ImageFormat = \"jpg\" | \"png\" | \"webp\" | \"avif\" | \"auto\" | \"\"\n\n/**\n * The minimal required reporter, as we don't want to import it from gatsby-cli\n */\nexport interface IReporter {\n  warn(message: string): void\n}\n\nexport interface ISharpGatsbyImageArgs {\n  layout?: Layout\n  formats?: Array<ImageFormat>\n  placeholder?: \"tracedSVG\" | \"dominantColor\" | \"blurred\" | \"none\"\n  tracedSVGOptions?: Record<string, unknown>\n  width?: number\n  height?: number\n  aspectRatio?: number\n  sizes?: string\n  quality?: number\n  transformOptions?: {\n    fit?: Fit\n    cropFocus?: number | string\n    duotone?: {\n      highlight: string\n      shadow: string\n      opacity?: number\n    }\n    grayscale?: boolean\n    rotate?: number\n    trim?: number\n  }\n  jpgOptions?: Record<string, unknown>\n  pngOptions?: Record<string, unknown>\n  webpOptions?: Record<string, unknown>\n  avifOptions?: Record<string, unknown>\n  blurredOptions?: { width?: number; toFormat?: ImageFormat }\n  breakpoints?: Array<number>\n  backgroundColor?: string\n}\n\nexport interface IImageSizeArgs {\n  width?: number\n  height?: number\n  layout?: Layout\n  filename: string\n  outputPixelDensities?: Array<number>\n  breakpoints?: Array<number>\n  fit?: Fit\n  reporter?: IReporter\n  sourceMetadata: { width: number; height: number }\n}\n\nexport interface IImageSizes {\n  sizes: Array<number>\n  presentationWidth: number\n  presentationHeight: number\n  aspectRatio: number\n  unscaledWidth: number\n}\n\nexport interface IImage {\n  src: string\n  width: number\n  height: number\n  format: ImageFormat\n}\n\nexport interface IGatsbyImageHelperArgs {\n  pluginName: string\n  generateImageSource: (\n    filename: string,\n    width: number,\n    height: number,\n    format: ImageFormat,\n    fit?: Fit,\n    options?: Record<string, unknown>\n  ) => IImage\n  layout?: Layout\n  formats?: Array<ImageFormat>\n  filename: string\n  placeholderURL?: string\n  width?: number\n  height?: number\n  sizes?: string\n  reporter?: IReporter\n  sourceMetadata?: { width: number; height: number; format: ImageFormat }\n  fit?: Fit\n  options?: Record<string, unknown>\n  breakpoints?: Array<number>\n  backgroundColor?: string\n  aspectRatio?: number\n}\n\nconst warn = (message: string): void => console.warn(message)\n\nconst sortNumeric = (a: number, b: number): number => a - b\n\nexport const getSizes = (width: number, layout: Layout): string | undefined => {\n  switch (layout) {\n    // If screen is wider than the max size, image width is the max size,\n    // otherwise it's the width of the screen\n    case `constrained`:\n      return `(min-width: ${width}px) ${width}px, 100vw`\n\n    // Image is always the same width, whatever the size of the screen\n    case `fixed`:\n      return `${width}px`\n\n    // Image is always the width of the screen\n    case `fullWidth`:\n      return `100vw`\n\n    default:\n      return undefined\n  }\n}\n\nexport const getSrcSet = (images: Array<IImage>): string =>\n  images.map(image => `${image.src} ${image.width}w`).join(`,\\n`)\n\nexport function formatFromFilename(filename: string): ImageFormat | undefined {\n  const dot = filename.lastIndexOf(`.`)\n  if (dot !== -1) {\n    const ext = filename.slice(dot + 1)\n    if (ext === `jpeg`) {\n      return `jpg`\n    }\n    if (ext.length === 3 || ext.length === 4) {\n      return ext as ImageFormat\n    }\n  }\n  return undefined\n}\n\nexport function setDefaultDimensions(\n  args: IGatsbyImageHelperArgs\n): IGatsbyImageHelperArgs {\n  let {\n    layout = `constrained`,\n    width,\n    height,\n    sourceMetadata,\n    breakpoints,\n    aspectRatio,\n    formats = [`auto`, `webp`],\n  } = args\n  formats = formats.map(format => format.toLowerCase() as ImageFormat)\n  layout = camelCase(layout) as Layout\n\n  if (width && height) {\n    return { ...args, formats, layout, aspectRatio: width / height }\n  }\n  if (sourceMetadata.width && sourceMetadata.height && !aspectRatio) {\n    aspectRatio = sourceMetadata.width / sourceMetadata.height\n  }\n\n  if (layout === `fullWidth`) {\n    width = width || sourceMetadata.width || breakpoints[breakpoints.length - 1]\n    height = height || Math.round(width / (aspectRatio || DEFAULT_ASPECT_RATIO))\n  } else {\n    if (!width) {\n      if (height && aspectRatio) {\n        width = height * aspectRatio\n      } else if (sourceMetadata.width) {\n        width = sourceMetadata.width\n      } else if (height) {\n        width = Math.round(height / DEFAULT_ASPECT_RATIO)\n      } else {\n        width = DEFAULT_FIXED_WIDTH\n      }\n    }\n\n    if (aspectRatio && !height) {\n      height = Math.round(width / aspectRatio)\n    } else if (!aspectRatio) {\n      aspectRatio = width / height\n    }\n  }\n  return { ...args, width, height, aspectRatio, layout, formats }\n}\n\n/**\n * Use this for getting an image for the blurred placeholder. This ensures the\n * aspect ratio and crop match the main image\n */\nexport function getLowResolutionImageURL(\n  args: IGatsbyImageHelperArgs,\n  width = 20\n): string {\n  args = setDefaultDimensions(args)\n  const { generateImageSource, filename, aspectRatio } = args\n  return generateImageSource(\n    filename,\n    width,\n    Math.round(width / aspectRatio),\n    args.sourceMetadata.format || `jpg`,\n    args.fit,\n    args.options\n  )?.src\n}\n\nexport function generateImageData(\n  args: IGatsbyImageHelperArgs\n): IGatsbyImageData {\n  args = setDefaultDimensions(args)\n\n  let {\n    pluginName,\n    sourceMetadata,\n    generateImageSource,\n    layout,\n    fit,\n    options,\n    width,\n    height,\n    filename,\n    reporter = { warn },\n    backgroundColor,\n    placeholderURL,\n  } = args\n\n  if (!pluginName) {\n    reporter.warn(\n      `[gatsby-plugin-image] \"generateImageData\" was not passed a plugin name`\n    )\n  }\n\n  if (typeof generateImageSource !== `function`) {\n    throw new Error(`generateImageSource must be a function`)\n  }\n\n  if (!sourceMetadata || (!sourceMetadata.width && !sourceMetadata.height)) {\n    // No metadata means we let the CDN handle max size etc, aspect ratio etc\n    sourceMetadata = {\n      width,\n      height,\n      format: sourceMetadata?.format || formatFromFilename(filename) || `auto`,\n    }\n  } else if (!sourceMetadata.format) {\n    sourceMetadata.format = formatFromFilename(filename)\n  }\n\n  const formats = new Set<ImageFormat>(args.formats)\n\n  if (formats.size === 0 || formats.has(`auto`) || formats.has(``)) {\n    formats.delete(`auto`)\n    formats.delete(``)\n    formats.add(sourceMetadata.format)\n  }\n\n  if (formats.has(`jpg`) && formats.has(`png`)) {\n    reporter.warn(\n      `[${pluginName}] Specifying both 'jpg' and 'png' formats is not supported. Using 'auto' instead`\n    )\n    if (sourceMetadata.format === `jpg`) {\n      formats.delete(`png`)\n    } else {\n      formats.delete(`jpg`)\n    }\n  }\n\n  const imageSizes = calculateImageSizes({ ...args, sourceMetadata })\n\n  const result: IGatsbyImageData[\"images\"] = {\n    sources: [],\n  }\n\n  let sizes = args.sizes\n  if (!sizes) {\n    sizes = getSizes(imageSizes.presentationWidth, layout)\n  }\n\n  formats.forEach(format => {\n    const images = imageSizes.sizes\n      .map(size => {\n        const imageSrc = generateImageSource(\n          filename,\n          size,\n          Math.round(size / imageSizes.aspectRatio),\n          format,\n          fit,\n          options\n        )\n        if (\n          !imageSrc?.width ||\n          !imageSrc.height ||\n          !imageSrc.src ||\n          !imageSrc.format\n        ) {\n          reporter.warn(\n            `[${pluginName}] The resolver for image ${filename} returned an invalid value.`\n          )\n          return undefined\n        }\n        return imageSrc\n      })\n      .filter(Boolean)\n\n    if (format === `jpg` || format === `png` || format === `auto`) {\n      const unscaled =\n        images.find(img => img.width === imageSizes.unscaledWidth) || images[0]\n\n      if (unscaled) {\n        result.fallback = {\n          src: unscaled.src,\n          srcSet: getSrcSet(images),\n          sizes,\n        }\n      }\n    } else {\n      result.sources?.push({\n        srcSet: getSrcSet(images),\n        sizes,\n        type: `image/${format}`,\n      })\n    }\n  })\n\n  const imageProps: Partial<IGatsbyImageData> = {\n    images: result,\n    layout,\n    backgroundColor,\n  }\n\n  if (placeholderURL) {\n    imageProps.placeholder = { fallback: placeholderURL }\n  }\n\n  switch (layout) {\n    case `fixed`:\n      imageProps.width = imageSizes.presentationWidth\n      imageProps.height = imageSizes.presentationHeight\n      break\n\n    case `fullWidth`:\n      imageProps.width = 1\n      imageProps.height = 1 / imageSizes.aspectRatio\n      break\n\n    case `constrained`:\n      imageProps.width = args.width || imageSizes.presentationWidth || 1\n      imageProps.height = (imageProps.width || 1) / imageSizes.aspectRatio\n  }\n\n  return imageProps as IGatsbyImageData\n}\n\nconst dedupeAndSortDensities = (values: Array<number>): Array<number> =>\n  Array.from(new Set([1, ...values])).sort(sortNumeric)\n\nexport function calculateImageSizes(args: IImageSizeArgs): IImageSizes {\n  const {\n    width,\n    height,\n    filename,\n    layout = `constrained`,\n    sourceMetadata: imgDimensions,\n    reporter = { warn },\n    breakpoints = DEFAULT_BREAKPOINTS,\n  } = args\n\n  // check that all dimensions provided are positive\n  const userDimensions = { width, height }\n  const erroneousUserDimensions = Object.entries(userDimensions).filter(\n    ([_, size]) => typeof size === `number` && size < 1\n  )\n  if (erroneousUserDimensions.length) {\n    throw new Error(\n      `Specified dimensions for images must be positive numbers (> 0). Problem dimensions you have are ${erroneousUserDimensions\n        .map(dim => dim.join(`: `))\n        .join(`, `)}`\n    )\n  }\n\n  if (layout === `fixed`) {\n    return fixedImageSizes(args)\n  } else if (layout === `constrained`) {\n    return responsiveImageSizes(args)\n  } else if (layout === `fullWidth`) {\n    return responsiveImageSizes({ breakpoints, ...args })\n  } else {\n    reporter.warn(\n      `No valid layout was provided for the image at ${filename}. Valid image layouts are fixed, fullWidth, and constrained. Found ${layout}`\n    )\n    return {\n      sizes: [imgDimensions.width],\n      presentationWidth: imgDimensions.width,\n      presentationHeight: imgDimensions.height,\n      aspectRatio: imgDimensions.width / imgDimensions.height,\n      unscaledWidth: imgDimensions.width,\n    }\n  }\n}\nexport function fixedImageSizes({\n  filename,\n  sourceMetadata: imgDimensions,\n  width,\n  height,\n  fit = `cover`,\n  outputPixelDensities = DEFAULT_PIXEL_DENSITIES,\n  reporter = { warn },\n}: IImageSizeArgs): IImageSizes {\n  let aspectRatio = imgDimensions.width / imgDimensions.height\n  // Sort, dedupe and ensure there's a 1\n  const densities = dedupeAndSortDensities(outputPixelDensities)\n\n  // If both are provided then we need to check the fit\n  if (width && height) {\n    const calculated = getDimensionsAndAspectRatio(imgDimensions, {\n      width,\n      height,\n      fit,\n    })\n    width = calculated.width\n    height = calculated.height\n    aspectRatio = calculated.aspectRatio\n  }\n\n  if (!width) {\n    if (!height) {\n      width = DEFAULT_FIXED_WIDTH\n    } else {\n      width = Math.round(height * aspectRatio)\n    }\n  } else if (!height) {\n    height = Math.round(width / aspectRatio)\n  }\n\n  const originalWidth = width // will use this for presentationWidth, don't want to lose it\n  const isTopSizeOverriden =\n    imgDimensions.width < width || imgDimensions.height < (height as number)\n\n  // If the image is smaller than requested, warn the user that it's being processed as such\n  // print out this message with the necessary information before we overwrite it for sizing\n  if (isTopSizeOverriden) {\n    const fixedDimension = imgDimensions.width < width ? `width` : `height`\n    reporter.warn(`\nThe requested ${fixedDimension} \"${\n      fixedDimension === `width` ? width : height\n    }px\" for the image ${filename} was larger than the actual image ${fixedDimension} of ${\n      imgDimensions[fixedDimension]\n    }px. If possible, replace the current image with a larger one.`)\n\n    if (fixedDimension === `width`) {\n      width = imgDimensions.width\n      height = Math.round(width / aspectRatio)\n    } else {\n      height = imgDimensions.height\n      width = height * aspectRatio\n    }\n  }\n\n  const sizes = densities\n    .filter(size => size >= 1) // remove smaller densities because fixed images don't need them\n    .map(density => Math.round(density * (width as number)))\n    .filter(size => size <= imgDimensions.width)\n\n  return {\n    sizes,\n    aspectRatio,\n    presentationWidth: originalWidth,\n    presentationHeight: Math.round(originalWidth / aspectRatio),\n    unscaledWidth: width,\n  }\n}\n\nexport function responsiveImageSizes({\n  sourceMetadata: imgDimensions,\n  width,\n  height,\n  fit = `cover`,\n  outputPixelDensities = DEFAULT_PIXEL_DENSITIES,\n  breakpoints,\n  layout,\n}: IImageSizeArgs): IImageSizes {\n  let sizes\n  let aspectRatio = imgDimensions.width / imgDimensions.height\n  // Sort, dedupe and ensure there's a 1\n  const densities = dedupeAndSortDensities(outputPixelDensities)\n\n  // If both are provided then we need to check the fit\n  if (width && height) {\n    const calculated = getDimensionsAndAspectRatio(imgDimensions, {\n      width,\n      height,\n      fit,\n    })\n    width = calculated.width\n    height = calculated.height\n    aspectRatio = calculated.aspectRatio\n  }\n\n  // Case 1: width of height were passed in, make sure it isn't larger than the actual image\n  width = width && Math.min(width, imgDimensions.width)\n  height = height && Math.min(height, imgDimensions.height)\n\n  // Case 2: neither width or height were passed in, use default size\n  if (!width && !height) {\n    width = Math.min(DEFAULT_FLUID_WIDTH, imgDimensions.width)\n    height = width / aspectRatio\n  }\n\n  // if it still hasn't been found, calculate width from the derived height.\n  // TS isn't smart enough to realise the type for height has been narrowed here\n  if (!width) {\n    width = (height as number) * aspectRatio\n  }\n\n  const originalWidth = width\n  const isTopSizeOverriden =\n    imgDimensions.width < width || imgDimensions.height < (height as number)\n  if (isTopSizeOverriden) {\n    width = imgDimensions.width\n    height = imgDimensions.height\n  }\n\n  width = Math.round(width)\n\n  if (breakpoints?.length > 0) {\n    sizes = breakpoints.filter(size => size <= imgDimensions.width)\n\n    // If a larger breakpoint has been filtered-out, add the actual image width instead\n    if (\n      sizes.length < breakpoints.length &&\n      !sizes.includes(imgDimensions.width)\n    ) {\n      sizes.push(imgDimensions.width)\n    }\n  } else {\n    sizes = densities.map(density => Math.round(density * (width as number)))\n    sizes = sizes.filter(size => size <= imgDimensions.width)\n  }\n\n  // ensure that the size passed in is included in the final output\n  if (layout === `constrained` && !sizes.includes(width)) {\n    sizes.push(width)\n  }\n  sizes = sizes.sort(sortNumeric)\n  return {\n    sizes,\n    aspectRatio,\n    presentationWidth: originalWidth,\n    presentationHeight: Math.round(originalWidth / aspectRatio),\n    unscaledWidth: width,\n  }\n}\n\nexport function getDimensionsAndAspectRatio(\n  dimensions,\n  options\n): { width: number; height: number; aspectRatio: number } {\n  // Calculate the eventual width/height of the image.\n  const imageAspectRatio = dimensions.width / dimensions.height\n\n  let width = options.width\n  let height = options.height\n\n  switch (options.fit) {\n    case `fill`: {\n      width = options.width ? options.width : dimensions.width\n      height = options.height ? options.height : dimensions.height\n      break\n    }\n    case `inside`: {\n      const widthOption = options.width\n        ? options.width\n        : Number.MAX_SAFE_INTEGER\n      const heightOption = options.height\n        ? options.height\n        : Number.MAX_SAFE_INTEGER\n\n      width = Math.min(widthOption, Math.round(heightOption * imageAspectRatio))\n      height = Math.min(\n        heightOption,\n        Math.round(widthOption / imageAspectRatio)\n      )\n      break\n    }\n    case `outside`: {\n      const widthOption = options.width ? options.width : 0\n      const heightOption = options.height ? options.height : 0\n\n      width = Math.max(widthOption, Math.round(heightOption * imageAspectRatio))\n      height = Math.max(\n        heightOption,\n        Math.round(widthOption / imageAspectRatio)\n      )\n      break\n    }\n\n    default: {\n      if (options.width && !options.height) {\n        width = options.width\n        height = Math.round(options.width / imageAspectRatio)\n      }\n\n      if (options.height && !options.width) {\n        width = Math.round(options.height * imageAspectRatio)\n        height = options.height\n      }\n    }\n  }\n\n  return {\n    width,\n    height,\n    aspectRatio: width / height,\n  }\n}\n","/* global GATSBY___IMAGE */\nimport { generateImageData, EVERY_BREAKPOINT } from \"../image-utils\"\nimport type { CSSProperties, HTMLAttributes, ImgHTMLAttributes } from \"react\"\nimport type { Node } from \"gatsby\"\nimport type { PlaceholderProps } from \"./placeholder\"\nimport type { MainImageProps } from \"./main-image\"\nimport type { IGatsbyImageData } from \"./gatsby-image.browser\"\nimport type {\n  IGatsbyImageHelperArgs,\n  Layout,\n  IImage,\n  ImageFormat,\n} from \"../image-utils\"\n\n// Native lazy-loading support: https://addyosmani.com/blog/lazy-loading/\nexport const hasNativeLazyLoadSupport = (): boolean =>\n  typeof HTMLImageElement !== `undefined` &&\n  `loading` in HTMLImageElement.prototype\n\nexport function gatsbyImageIsInstalled(): boolean {\n  return typeof GATSBY___IMAGE !== `undefined` && GATSBY___IMAGE\n}\n\nexport type IGatsbyImageDataParent<T = never> = T & {\n  gatsbyImageData: IGatsbyImageData\n}\nexport type IGatsbyImageParent<T = never> = T & {\n  gatsbyImage: IGatsbyImageData\n}\nexport type FileNode = Node & {\n  childImageSharp?: IGatsbyImageDataParent<Node>\n}\n\nconst isGatsbyImageData = (\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  node: IGatsbyImageData | any\n): node is IGatsbyImageData =>\n  // 🦆 check for a deep prop to be sure this is a valid gatsbyImageData object\n  Boolean(node?.images?.fallback?.src)\n\nconst isGatsbyImageDataParent = <T>(\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  node: IGatsbyImageDataParent<T> | any\n): node is IGatsbyImageDataParent<T> => Boolean(node?.gatsbyImageData)\n\nconst isGatsbyImageParent = <T>(\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  node: IGatsbyImageParent<T> | any\n): node is IGatsbyImageParent<T> => Boolean(node?.gatsbyImage)\n\nexport type ImageDataLike =\n  | FileNode\n  | IGatsbyImageDataParent\n  | IGatsbyImageParent\n  | IGatsbyImageData\n\nexport const getImage = (node: ImageDataLike): IGatsbyImageData | undefined => {\n  if (isGatsbyImageData(node)) {\n    return node\n  }\n  // gatsbyImageData GraphQL field\n  if (isGatsbyImageDataParent(node)) {\n    return node.gatsbyImageData\n  }\n  // gatsbyImage GraphQL field for Gatsby's Image CDN service\n  if (isGatsbyImageParent(node)) {\n    return node.gatsbyImage\n  }\n  return node?.childImageSharp?.gatsbyImageData\n}\n\nexport const getSrc = (node: ImageDataLike): string | undefined =>\n  getImage(node)?.images?.fallback?.src\n\nexport const getSrcSet = (node: ImageDataLike): string | undefined =>\n  getImage(node)?.images?.fallback?.srcSet\n\nexport function getWrapperProps(\n  width: number,\n  height: number,\n  layout: Layout\n): Pick<HTMLAttributes<HTMLElement>, \"className\" | \"style\"> & {\n  \"data-gatsby-image-wrapper\": string\n} {\n  const wrapperStyle: CSSProperties = {}\n\n  let className = `gatsby-image-wrapper`\n\n  // If the plugin isn't installed we need to apply the styles inline\n  if (!gatsbyImageIsInstalled()) {\n    wrapperStyle.position = `relative`\n    wrapperStyle.overflow = `hidden`\n  }\n\n  if (layout === `fixed`) {\n    wrapperStyle.width = width\n    wrapperStyle.height = height\n  } else if (layout === `constrained`) {\n    if (!gatsbyImageIsInstalled()) {\n      wrapperStyle.display = `inline-block`\n      wrapperStyle.verticalAlign = `top`\n    }\n    className = `gatsby-image-wrapper gatsby-image-wrapper-constrained`\n  }\n\n  return {\n    className,\n    \"data-gatsby-image-wrapper\": ``,\n    style: wrapperStyle,\n  }\n}\n\nexport interface IUrlBuilderArgs<OptionsType> {\n  width: number\n  height: number\n  baseUrl: string\n  format: ImageFormat\n  options: OptionsType\n}\nexport interface IGetImageDataArgs<OptionsType = Record<string, unknown>> {\n  baseUrl: string\n  /**\n   * For constrained and fixed images, the size of the image element\n   */\n  width?: number\n  height?: number\n  /**\n   * If available, pass the source image width and height\n   */\n  sourceWidth?: number\n  sourceHeight?: number\n  /**\n   * If only one dimension is passed, then this will be used to calculate the other.\n   */\n  aspectRatio?: number\n  layout?: Layout\n  /**\n   * Returns a URL based on the passed arguments. Should be a pure function\n   */\n  urlBuilder: (args: IUrlBuilderArgs<OptionsType>) => string\n\n  /**\n   * Should be a data URI\n   */\n  placeholderURL?: string\n  backgroundColor?: string\n  /**\n   * Used in error messages etc\n   */\n  pluginName?: string\n\n  /**\n   * If you do not support auto-format, pass an array of image types here\n   */\n  formats?: Array<ImageFormat>\n\n  breakpoints?: Array<number>\n\n  /**\n   * Passed to the urlBuilder function\n   */\n  options?: OptionsType\n}\n\n/**\n * Use this hook to generate gatsby-plugin-image data in the browser.\n */\nexport function getImageData<OptionsType>({\n  baseUrl,\n  urlBuilder,\n  sourceWidth,\n  sourceHeight,\n  pluginName = `getImageData`,\n  formats = [`auto`],\n  breakpoints,\n  options,\n  ...props\n}: IGetImageDataArgs<OptionsType>): IGatsbyImageData {\n  if (\n    !breakpoints?.length &&\n    (props.layout === `fullWidth` || (props.layout as string) === `FULL_WIDTH`)\n  ) {\n    breakpoints = EVERY_BREAKPOINT\n  }\n  const generateImageSource = (\n    baseUrl: string,\n    width: number,\n    height?: number,\n    format?: ImageFormat\n  ): IImage => {\n    return {\n      width,\n      height,\n      format,\n      src: urlBuilder({ baseUrl, width, height, options, format }),\n    }\n  }\n\n  const sourceMetadata: IGatsbyImageHelperArgs[\"sourceMetadata\"] = {\n    width: sourceWidth,\n    height: sourceHeight,\n    format: `auto`,\n  }\n\n  const args: IGatsbyImageHelperArgs = {\n    ...props,\n    pluginName,\n    generateImageSource,\n    filename: baseUrl,\n    formats,\n    breakpoints,\n    sourceMetadata,\n  }\n  return generateImageData(args)\n}\n\nexport function getMainProps(\n  isLoading: boolean,\n  isLoaded: boolean,\n  images: IGatsbyImageData[\"images\"],\n  loading?: \"eager\" | \"lazy\",\n  style: CSSProperties = {}\n): Partial<MainImageProps> {\n  // fallback when it's not configured in gatsby-config.\n  if (!gatsbyImageIsInstalled()) {\n    style = {\n      height: `100%`,\n      left: 0,\n      position: `absolute`,\n      top: 0,\n      transform: `translateZ(0)`,\n      transition: `opacity 250ms linear`,\n      width: `100%`,\n      willChange: `opacity`,\n      ...style,\n    }\n  }\n\n  const result = {\n    ...images,\n    loading,\n    shouldLoad: isLoading,\n    \"data-main-image\": ``,\n    style: {\n      ...style,\n      opacity: isLoaded ? 1 : 0,\n    },\n  }\n\n  return result\n}\n\nexport type PlaceholderImageAttrs = ImgHTMLAttributes<HTMLImageElement> &\n  Pick<PlaceholderProps, \"sources\" | \"fallback\"> & {\n    \"data-placeholder-image\"?: string\n  }\n\nexport function getPlaceholderProps(\n  placeholder: PlaceholderImageAttrs | undefined,\n  isLoaded: boolean,\n  layout: Layout,\n  width?: number,\n  height?: number,\n  backgroundColor?: string,\n  objectFit?: CSSProperties[\"objectFit\"],\n  objectPosition?: CSSProperties[\"objectPosition\"]\n): PlaceholderImageAttrs {\n  const wrapperStyle: CSSProperties = {}\n\n  if (backgroundColor) {\n    wrapperStyle.backgroundColor = backgroundColor\n\n    if (layout === `fixed`) {\n      wrapperStyle.width = width\n      wrapperStyle.height = height\n      wrapperStyle.backgroundColor = backgroundColor\n      wrapperStyle.position = `relative`\n    } else if (layout === `constrained`) {\n      wrapperStyle.position = `absolute`\n      wrapperStyle.top = 0\n      wrapperStyle.left = 0\n      wrapperStyle.bottom = 0\n      wrapperStyle.right = 0\n    } else if (layout === `fullWidth`) {\n      wrapperStyle.position = `absolute`\n      wrapperStyle.top = 0\n      wrapperStyle.left = 0\n      wrapperStyle.bottom = 0\n      wrapperStyle.right = 0\n    }\n  }\n\n  if (objectFit) {\n    wrapperStyle.objectFit = objectFit\n  }\n\n  if (objectPosition) {\n    wrapperStyle.objectPosition = objectPosition\n  }\n  const result: PlaceholderImageAttrs = {\n    ...placeholder,\n    \"aria-hidden\": true,\n    \"data-placeholder-image\": ``,\n    style: {\n      opacity: isLoaded ? 0 : 1,\n      transition: `opacity 500ms linear`,\n      ...wrapperStyle,\n    },\n  }\n\n  // fallback when it's not configured in gatsby-config.\n  if (!gatsbyImageIsInstalled()) {\n    result.style = {\n      height: `100%`,\n      left: 0,\n      position: `absolute`,\n      top: 0,\n      width: `100%`,\n    }\n  }\n\n  return result\n}\n\nexport interface IArtDirectedImage {\n  media: string\n  image: IGatsbyImageData\n}\n\n/**\n * Generate a Gatsby image data object with multiple, art-directed images that display at different\n * resolutions.\n *\n * @param defaultImage The image displayed when no media query matches.\n * It is also used for all other settings applied to the image, such as width, height and layout.\n * You should pass a className to the component with media queries to adjust the size of the container,\n * as this cannot be adjusted automatically.\n * @param artDirected Array of objects which each contains a `media` string which is a media query\n * such as `(min-width: 320px)`, and the image object to use when that query matches.\n */\nexport function withArtDirection(\n  defaultImage: IGatsbyImageData,\n  artDirected: Array<IArtDirectedImage>\n): IGatsbyImageData {\n  const { images, placeholder, ...props } = defaultImage\n  const output: IGatsbyImageData = {\n    ...props,\n    images: {\n      ...images,\n      sources: [],\n    },\n    placeholder: placeholder && {\n      ...placeholder,\n      sources: [],\n    },\n  }\n\n  artDirected.forEach(({ media, image }) => {\n    if (!media) {\n      if (process.env.NODE_ENV === `development`) {\n        console.warn(\n          \"[gatsby-plugin-image] All art-directed images passed to must have a value set for `media`. Skipping.\"\n        )\n      }\n      return\n    }\n\n    if (\n      image.layout !== defaultImage.layout &&\n      process.env.NODE_ENV === `development`\n    ) {\n      console.warn(\n        `[gatsby-plugin-image] Mismatched image layout: expected \"${defaultImage.layout}\" but received \"${image.layout}\". All art-directed images use the same layout as the default image`\n      )\n    }\n\n    output.images.sources.push(\n      ...image.images.sources.map(source => {\n        return { ...source, media }\n      }),\n      {\n        media,\n        srcSet: image.images.fallback.srcSet,\n      }\n    )\n\n    if (!output.placeholder) {\n      return\n    }\n\n    output.placeholder.sources.push({\n      media,\n      srcSet: image.placeholder.fallback,\n    })\n  })\n  output.images.sources.push(...images.sources)\n  if (placeholder?.sources) {\n    output.placeholder?.sources.push(...placeholder.sources)\n  }\n  return output\n}\n","import React, { FunctionComponent, ImgHTMLAttributes } from \"react\"\nimport * as PropTypes from \"prop-types\"\n\nexport interface IResponsiveImageProps {\n  sizes?: string\n  srcSet: string\n}\n\nexport type SourceProps = IResponsiveImageProps &\n  (\n    | {\n        media: string\n        type?: string\n      }\n    | {\n        media?: string\n        type: string\n      }\n  )\n\ntype FallbackProps = { src: string } & Partial<IResponsiveImageProps>\n\ntype ImageProps = ImgHTMLAttributes<HTMLImageElement> & {\n  src: string\n  alt: string\n  shouldLoad: boolean\n}\n\nexport type PictureProps = ImgHTMLAttributes<HTMLImageElement> & {\n  fallback?: FallbackProps\n  sources?: Array<SourceProps>\n  alt: string\n  shouldLoad?: boolean\n}\n\nconst Image: FunctionComponent<ImageProps> = function Image({\n  src,\n  srcSet,\n  loading,\n  alt = ``,\n  shouldLoad,\n  ...props\n}) {\n  return (\n    <img\n      {...props}\n      decoding=\"async\"\n      loading={loading}\n      src={shouldLoad ? src : undefined}\n      data-src={!shouldLoad ? src : undefined}\n      srcSet={shouldLoad ? srcSet : undefined}\n      data-srcset={!shouldLoad ? srcSet : undefined}\n      alt={alt}\n    />\n  )\n}\n\nexport const Picture: React.FC<PictureProps> = function Picture({\n  fallback,\n  sources = [],\n  shouldLoad = true,\n  ...props\n}) {\n  const sizes = props.sizes || fallback?.sizes\n  const fallbackImage = (\n    <Image {...props} {...fallback} sizes={sizes} shouldLoad={shouldLoad} />\n  )\n\n  if (!sources.length) {\n    return fallbackImage\n  }\n\n  return (\n    <picture>\n      {sources.map(({ media, srcSet, type }) => (\n        <source\n          key={`${media}-${type}-${srcSet}`}\n          type={type}\n          media={media}\n          srcSet={shouldLoad ? srcSet : undefined}\n          data-srcset={!shouldLoad ? srcSet : undefined}\n          sizes={sizes}\n        />\n      ))}\n      {fallbackImage}\n    </picture>\n  )\n}\n\nImage.propTypes = {\n  src: PropTypes.string.isRequired,\n  alt: PropTypes.string.isRequired,\n  sizes: PropTypes.string,\n  srcSet: PropTypes.string,\n  shouldLoad: PropTypes.bool,\n}\n\nPicture.displayName = `Picture`\nPicture.propTypes = {\n  alt: PropTypes.string.isRequired,\n  shouldLoad: PropTypes.bool,\n  fallback: PropTypes.exact({\n    src: PropTypes.string.isRequired,\n    srcSet: PropTypes.string,\n    sizes: PropTypes.string,\n  }),\n  sources: PropTypes.arrayOf(\n    PropTypes.oneOfType([\n      PropTypes.exact({\n        media: PropTypes.string.isRequired,\n        type: PropTypes.string,\n        sizes: PropTypes.string,\n        srcSet: PropTypes.string.isRequired,\n      }),\n      PropTypes.exact({\n        media: PropTypes.string,\n        type: PropTypes.string.isRequired,\n        sizes: PropTypes.string,\n        srcSet: PropTypes.string.isRequired,\n      }),\n    ])\n  ),\n}\n","import React, { Fragment, FunctionComponent } from \"react\"\nimport terserMacro from \"../../macros/terser.macro\"\nimport { Layout } from \"../image-utils\"\n\nexport interface ILayoutWrapperProps {\n  layout: Layout\n  width: number\n  height: number\n}\n\nconst NativeScriptLoading: FunctionComponent = () => (\n  <script\n    type=\"module\"\n    dangerouslySetInnerHTML={{\n      __html: terserMacro`\nconst hasNativeLazyLoadSupport = typeof HTMLImageElement !== \"undefined\" && \"loading\" in HTMLImageElement.prototype;\nif (hasNativeLazyLoadSupport) {\n  const gatsbyImages = document.querySelectorAll('img[data-main-image]');\n  for (let mainImage of gatsbyImages) {\n    if (mainImage.dataset.src) {\n      mainImage.setAttribute('src', mainImage.dataset.src)\n      mainImage.removeAttribute('data-src')\n    }\n    if (mainImage.dataset.srcset) {\n      mainImage.setAttribute('srcset', mainImage.dataset.srcset)\n      mainImage.removeAttribute('data-srcset')\n    }\n\n    const sources = mainImage.parentNode.querySelectorAll('source[data-srcset]');\n    for (let source of sources) {\n      source.setAttribute('srcset', source.dataset.srcset)\n      source.removeAttribute('data-srcset')\n    }\n\n    if (mainImage.complete) {\n      mainImage.style.opacity = 1;\n\n      // also hide the placeholder\n      mainImage.parentNode.parentNode.querySelector('[data-placeholder-image]').style.opacity = 0;\n    }\n  }\n}\n`,\n    }}\n  />\n)\n\nexport function getSizer(\n  layout: Layout,\n  width: number,\n  height: number\n): string {\n  let sizer = ``\n  if (layout === `fullWidth`) {\n    sizer = `<div aria-hidden=\"true\" style=\"padding-top: ${\n      (height / width) * 100\n    }%;\"></div>`\n  }\n\n  if (layout === `constrained`) {\n    sizer = `<div style=\"max-width: ${width}px; display: block;\"><img alt=\"\" role=\"presentation\" aria-hidden=\"true\" src=\"data:image/svg+xml;charset=utf-8,%3Csvg height='${height}' width='${width}' xmlns='http://www.w3.org/2000/svg' version='1.1'%3E%3C/svg%3E\" style=\"max-width: 100%; display: block; position: static;\"></div>`\n  }\n\n  return sizer\n}\n\nconst Sizer: FunctionComponent<ILayoutWrapperProps> = function Sizer({\n  layout,\n  width,\n  height,\n}) {\n  if (layout === `fullWidth`) {\n    return (\n      <div aria-hidden style={{ paddingTop: `${(height / width) * 100}%` }} />\n    )\n  }\n\n  if (layout === `constrained`) {\n    return (\n      <div style={{ maxWidth: width, display: `block` }}>\n        <img\n          alt=\"\"\n          role=\"presentation\"\n          aria-hidden=\"true\"\n          src={`data:image/svg+xml;charset=utf-8,%3Csvg height='${height}' width='${width}' xmlns='http://www.w3.org/2000/svg' version='1.1'%3E%3C/svg%3E`}\n          style={{\n            maxWidth: `100%`,\n            display: `block`,\n            position: `static`,\n          }}\n        />\n      </div>\n    )\n  }\n\n  return null\n}\n\nexport const LayoutWrapper: FunctionComponent<ILayoutWrapperProps> =\n  function LayoutWrapper({ children, ...props }) {\n    return (\n      <Fragment>\n        <Sizer {...props} />\n        {children}\n\n        {SERVER ? <NativeScriptLoading /> : null}\n      </Fragment>\n    )\n  }\n","import React, { FunctionComponent, ImgHTMLAttributes } from \"react\"\nimport * as PropTypes from \"prop-types\"\nimport { Picture, SourceProps } from \"./picture\"\n\nexport type PlaceholderProps = ImgHTMLAttributes<HTMLImageElement> & {\n  fallback?: string\n  sources?: Array<SourceProps>\n}\n\nexport const Placeholder: FunctionComponent<PlaceholderProps> =\n  function Placeholder({ fallback, ...props }) {\n    if (fallback) {\n      return (\n        <Picture\n          {...props}\n          fallback={{\n            src: fallback,\n          }}\n          aria-hidden\n          alt=\"\"\n        />\n      )\n    } else {\n      return <div {...props}></div>\n    }\n  }\n\nPlaceholder.displayName = `Placeholder`\nPlaceholder.propTypes = {\n  fallback: PropTypes.string,\n  sources: Picture.propTypes?.sources,\n  alt: function (props, propName, componentName): Error | null {\n    if (!props[propName]) {\n      return null\n    }\n\n    return new Error(\n      `Invalid prop \\`${propName}\\` supplied to \\`${componentName}\\`. Validation failed.`\n    )\n  },\n}\n","import React from \"react\"\nimport { Picture, PictureProps } from \"./picture\"\n\nexport type MainImageProps = PictureProps\n\nexport const MainImage: React.FC<PictureProps> = function MainImage(props) {\n  return (\n    <>\n      <Picture {...props} />\n      <noscript>\n        <Picture {...props} shouldLoad={true} />\n      </noscript>\n    </>\n  )\n}\n\nMainImage.displayName = `MainImage`\nMainImage.propTypes = Picture.propTypes\n","import {\n  createElement,\n  memo,\n  useMemo,\n  useEffect,\n  useLayoutEffect,\n  useRef,\n} from \"react\"\nimport {\n  getWrapperProps,\n  gatsbyImageIsInstalled,\n  hasNativeLazyLoadSupport,\n} from \"./hooks\"\nimport { getSizer } from \"./layout-wrapper\"\nimport { propTypes } from \"./gatsby-image.server\"\nimport type {\n  FC,\n  ElementType,\n  FunctionComponent,\n  ImgHTMLAttributes,\n  CSSProperties,\n  ReactEventHandler,\n} from \"react\"\nimport type { renderImageToString } from \"./lazy-hydrate\"\nimport type { PlaceholderProps } from \"./placeholder\"\nimport type { MainImageProps } from \"./main-image\"\nimport type { Layout } from \"../image-utils\"\n\nconst imageCache = new Set<string>()\nlet renderImageToStringPromise\nlet renderImage: typeof renderImageToString | undefined\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport interface GatsbyImageProps\n  extends Omit<\n    ImgHTMLAttributes<HTMLImageElement>,\n    \"placeholder\" | \"onLoad\" | \"src\" | \"srcSet\" | \"width\" | \"height\"\n  > {\n  alt: string\n  as?: ElementType\n  className?: string\n  class?: string\n  imgClassName?: string\n  image: IGatsbyImageData\n  imgStyle?: CSSProperties\n  backgroundColor?: string\n  objectFit?: CSSProperties[\"objectFit\"]\n  objectPosition?: CSSProperties[\"objectPosition\"]\n  onLoad?: (props: { wasCached: boolean }) => void\n  onError?: ReactEventHandler<HTMLImageElement>\n  onStartLoad?: (props: { wasCached: boolean }) => void\n}\n\nexport interface IGatsbyImageData {\n  layout: Layout\n  width: number\n  height: number\n  backgroundColor?: string\n  images: Pick<MainImageProps, \"sources\" | \"fallback\">\n  placeholder?: Pick<PlaceholderProps, \"sources\" | \"fallback\">\n}\n\nconst GatsbyImageHydrator: FC<GatsbyImageProps> = function GatsbyImageHydrator({\n  as = `div`,\n  image,\n  style,\n  backgroundColor,\n  className,\n  class: preactClass,\n  onStartLoad,\n  onLoad,\n  onError,\n  ...props\n}) {\n  const { width, height, layout } = image\n  const {\n    style: wStyle,\n    className: wClass,\n    ...wrapperProps\n  } = getWrapperProps(width, height, layout)\n  const root = useRef<HTMLElement>()\n  const cacheKey = useMemo(() => JSON.stringify(image.images), [image.images])\n\n  // Preact uses class instead of className so we need to check for both\n  if (preactClass) {\n    className = preactClass\n  }\n\n  const sizer = getSizer(layout, width, height)\n\n  useEffect(() => {\n    if (!renderImageToStringPromise) {\n      renderImageToStringPromise = import(`./lazy-hydrate`).then(\n        ({ renderImageToString, swapPlaceholderImage }) => {\n          renderImage = renderImageToString\n\n          return {\n            renderImageToString,\n            swapPlaceholderImage,\n          }\n        }\n      )\n    }\n\n    // The plugin image component is a bit special where if it's server-side rendered, we add extra script tags to support lazy-loading without\n    // In this case we stop hydration but fire the correct events.\n    const ssrImage = root.current.querySelector(\n      `[data-gatsby-image-ssr]`\n    ) as HTMLImageElement\n    if (ssrImage && hasNativeLazyLoadSupport()) {\n      if (ssrImage.complete) {\n        // Trigger onStartload and onLoad events\n        onStartLoad?.({\n          wasCached: true,\n        })\n        onLoad?.({\n          wasCached: true,\n        })\n\n        // remove ssr key for state updates but add delay to not fight with native code snippt of gatsby-ssr\n        setTimeout(() => {\n          ssrImage.removeAttribute(`data-gatsby-image-ssr`)\n        }, 0)\n      } else {\n        document.addEventListener(`load`, function onLoadListener() {\n          document.removeEventListener(`load`, onLoadListener)\n\n          onStartLoad?.({\n            wasCached: true,\n          })\n          onLoad?.({\n            wasCached: true,\n          })\n          // remove ssr key for state updates but add delay to not fight with native code snippt of gatsby-ssr\n          setTimeout(() => {\n            ssrImage.removeAttribute(`data-gatsby-image-ssr`)\n          }, 0)\n        })\n      }\n\n      imageCache.add(cacheKey)\n\n      return\n    }\n\n    if (renderImage && imageCache.has(cacheKey)) {\n      return\n    }\n\n    let animationFrame\n    let cleanupCallback\n    renderImageToStringPromise.then(\n      ({ renderImageToString, swapPlaceholderImage }) => {\n        root.current.innerHTML = renderImageToString({\n          isLoading: true,\n          isLoaded: imageCache.has(cacheKey),\n          image,\n          ...props,\n        })\n\n        if (!imageCache.has(cacheKey)) {\n          animationFrame = requestAnimationFrame(() => {\n            if (root.current) {\n              cleanupCallback = swapPlaceholderImage(\n                root.current,\n                cacheKey,\n                imageCache,\n                style,\n                onStartLoad,\n                onLoad,\n                onError\n              )\n            }\n          })\n        }\n      }\n    )\n\n    // eslint-disable-next-line consistent-return\n    return (): void => {\n      if (animationFrame) {\n        cancelAnimationFrame(animationFrame)\n      }\n      if (cleanupCallback) {\n        cleanupCallback()\n      }\n    }\n  }, [image])\n\n  // useLayoutEffect is ran before React commits to the DOM. This allows us to make sure our HTML is using our cached image version\n  useLayoutEffect(() => {\n    if (imageCache.has(cacheKey) && renderImage) {\n      root.current.innerHTML = renderImage({\n        isLoading: imageCache.has(cacheKey),\n        isLoaded: imageCache.has(cacheKey),\n        image,\n        ...props,\n      })\n\n      // Trigger onStartload and onLoad events\n      onStartLoad?.({\n        wasCached: true,\n      })\n      onLoad?.({\n        wasCached: true,\n      })\n    }\n  }, [image])\n\n  // By keeping all props equal React will keep the component in the DOM\n  return createElement(as, {\n    ...wrapperProps,\n    style: {\n      ...wStyle,\n      ...style,\n      backgroundColor,\n    },\n    className: `${wClass}${className ? ` ${className}` : ``}`,\n    ref: root,\n    dangerouslySetInnerHTML: {\n      __html: sizer,\n    },\n    suppressHydrationWarning: true,\n  })\n}\n\nexport const GatsbyImage: FunctionComponent<GatsbyImageProps> = memo(\n  function GatsbyImage(props) {\n    if (!props.image) {\n      if (process.env.NODE_ENV === `development`) {\n        console.warn(`[gatsby-plugin-image] Missing image prop`)\n      }\n\n      return null\n    }\n\n    if (!gatsbyImageIsInstalled() && process.env.NODE_ENV === `development`) {\n      console.warn(\n        `[gatsby-plugin-image] You're missing out on some cool performance features. Please add \"gatsby-plugin-image\" to your gatsby-config.js`\n      )\n    }\n\n    return createElement(GatsbyImageHydrator, props)\n  }\n)\n\nGatsbyImage.propTypes = propTypes\nGatsbyImage.displayName = `GatsbyImage`\n","import React from \"react\"\nimport { getWrapperProps, getMainProps, getPlaceholderProps } from \"./hooks\"\nimport { Placeholder } from \"./placeholder\"\nimport { MainImage, MainImageProps } from \"./main-image\"\nimport { LayoutWrapper } from \"./layout-wrapper\"\nimport PropTypes from \"prop-types\"\nimport type { FunctionComponent, WeakValidationMap } from \"react\"\nimport type { GatsbyImageProps, IGatsbyImageData } from \"./gatsby-image.browser\"\n\nconst removeNewLines = (str: string): string => str.replace(/\\n/g, ``)\n\nexport const GatsbyImage: FunctionComponent<GatsbyImageProps> =\n  function GatsbyImage({\n    as = `div`,\n    className,\n    class: preactClass,\n    style,\n    image,\n    loading = `lazy`,\n    imgClassName,\n    imgStyle,\n    backgroundColor,\n    objectFit,\n    objectPosition,\n    ...props\n  }) {\n    if (!image) {\n      console.warn(`[gatsby-plugin-image] Missing image prop`)\n      return null\n    }\n\n    if (preactClass) {\n      className = preactClass\n    }\n\n    imgStyle = {\n      objectFit,\n      objectPosition,\n      backgroundColor,\n      ...imgStyle,\n    }\n\n    const {\n      width,\n      height,\n      layout,\n      images,\n      placeholder,\n      backgroundColor: placeholderBackgroundColor,\n    } = image\n\n    const {\n      style: wStyle,\n      className: wClass,\n      ...wrapperProps\n    } = getWrapperProps(width, height, layout)\n\n    const cleanedImages: IGatsbyImageData[\"images\"] = {\n      fallback: undefined,\n      sources: [],\n    }\n    if (images.fallback) {\n      cleanedImages.fallback = {\n        ...images.fallback,\n        srcSet: images.fallback.srcSet\n          ? removeNewLines(images.fallback.srcSet)\n          : undefined,\n      }\n    }\n\n    if (images.sources) {\n      cleanedImages.sources = images.sources.map(source => {\n        return {\n          ...source,\n          srcSet: removeNewLines(source.srcSet),\n        }\n      })\n    }\n\n    return React.createElement(\n      as,\n      {\n        ...wrapperProps,\n        style: {\n          ...wStyle,\n          ...style,\n          backgroundColor,\n        },\n        className: `${wClass}${className ? ` ${className}` : ``}`,\n      },\n      <LayoutWrapper layout={layout} width={width} height={height}>\n        <Placeholder\n          {...getPlaceholderProps(\n            placeholder,\n            false,\n            layout,\n            width,\n            height,\n            placeholderBackgroundColor,\n            objectFit,\n            objectPosition\n          )}\n        />\n\n        <MainImage\n          data-gatsby-image-ssr=\"\"\n          className={imgClassName}\n          {...(props as Omit<\n            MainImageProps,\n            \"images\" | \"fallback\" | \"onError\" | \"onLoad\"\n          >)}\n          // When eager is set we want to start the isLoading state on true (we want to load the img without react)\n          {...getMainProps(\n            loading === `eager`,\n            false,\n            cleanedImages,\n            loading,\n            imgStyle\n          )}\n        />\n      </LayoutWrapper>\n    )\n  }\n\nexport const altValidator: PropTypes.Validator<string> = (\n  props: GatsbyImageProps,\n  propName,\n  componentName,\n  ...rest\n): Error | undefined => {\n  if (!props.alt && props.alt !== ``) {\n    return new Error(\n      `The \"alt\" prop is required in ${componentName}. If the image is purely presentational then pass an empty string: e.g. alt=\"\". Learn more: https://a11y-style-guide.com/style-guide/section-media.html`\n    )\n  }\n\n  return PropTypes.string(props, propName, componentName, ...rest)\n}\n\nexport const propTypes = {\n  image: PropTypes.object.isRequired,\n  alt: altValidator,\n} as WeakValidationMap<GatsbyImageProps>\n","import React, { FunctionComponent, ReactElement } from \"react\"\nimport {\n  altValidator,\n  GatsbyImage as GatsbyImageServer,\n} from \"./gatsby-image.server\"\nimport { GatsbyImageProps, IGatsbyImageData } from \"./gatsby-image.browser\"\nimport PropTypes from \"prop-types\"\nimport { ISharpGatsbyImageArgs } from \"../image-utils\"\n\nexport interface IStaticImageProps\n  extends Omit<GatsbyImageProps, \"image\">,\n    Omit<ISharpGatsbyImageArgs, \"backgroundColor\"> {\n  src: string\n}\n\n// These values are added by Babel. Do not add them manually\ninterface IPrivateProps {\n  __imageData?: IGatsbyImageData\n  __error?: string\n}\n\nexport function _getStaticImage(\n  GatsbyImage: FunctionComponent<GatsbyImageProps>\n): React.FC<IStaticImageProps & IPrivateProps> {\n  return function StaticImage({\n    src,\n    __imageData: imageData,\n    __error,\n    // We extract these because they're not meant to be passed-down to GatsbyImage\n    /* eslint-disable @typescript-eslint/no-unused-vars */\n    width,\n    height,\n    aspectRatio,\n    tracedSVGOptions,\n    placeholder,\n    formats,\n    quality,\n    transformOptions,\n    jpgOptions,\n    pngOptions,\n    webpOptions,\n    avifOptions,\n    blurredOptions,\n    /* eslint-enable @typescript-eslint/no-unused-vars */\n    ...props\n  }): ReactElement {\n    if (__error) {\n      console.warn(__error)\n    }\n\n    if (imageData) {\n      return <GatsbyImage image={imageData} {...props} />\n    }\n    console.warn(`Image not loaded`, src)\n    if (!__error && process.env.NODE_ENV === `development`) {\n      console.warn(\n        `Please ensure that \"gatsby-plugin-image\" is included in the plugins array in gatsby-config.js, and that your version of gatsby is at least 2.24.78`\n      )\n    }\n    return null\n  }\n}\n\nconst StaticImage: React.FC<IStaticImageProps & IPrivateProps> =\n  _getStaticImage(GatsbyImageServer)\n\nconst checkDimensionProps: PropTypes.Validator<number> = (\n  props: IStaticImageProps & IPrivateProps,\n  propName: keyof IStaticImageProps & IPrivateProps,\n  ...rest\n) => {\n  if (\n    props.layout === `fullWidth` &&\n    (propName === `width` || propName === `height`) &&\n    props[propName]\n  ) {\n    return new Error(\n      `\"${propName}\" ${props[propName]} may not be passed when layout is fullWidth.`\n    )\n  }\n  return PropTypes.number(props, propName, ...rest)\n}\n\nconst validLayouts = new Set([`fixed`, `fullWidth`, `constrained`])\n\nexport const propTypes = {\n  src: PropTypes.string.isRequired,\n  alt: altValidator,\n  width: checkDimensionProps,\n  height: checkDimensionProps,\n  sizes: PropTypes.string,\n  layout: (props: IStaticImageProps & IPrivateProps): Error | undefined => {\n    if (props.layout === undefined) {\n      return undefined\n    }\n    if (validLayouts.has(props.layout)) {\n      return undefined\n    }\n\n    return new Error(\n      `Invalid value ${props.layout}\" provided for prop \"layout\". Defaulting to \"constrained\". Valid values are \"fixed\", \"fullWidth\" or \"constrained\".`\n    )\n  },\n}\n\nStaticImage.displayName = `StaticImage`\nStaticImage.propTypes = propTypes\n\nexport { StaticImage }\n","import {\n  GatsbyImage as GatsbyImageBrowser,\n  IGatsbyImageData,\n} from \"./gatsby-image.browser\"\nimport React from \"react\"\nimport {\n  _getStaticImage,\n  propTypes,\n  IStaticImageProps,\n} from \"./static-image.server\"\n// These values are added by Babel. Do not add them manually\ninterface IPrivateProps {\n  __imageData?: IGatsbyImageData\n  __error?: string\n}\n\nconst StaticImage: React.FC<IStaticImageProps & IPrivateProps> =\n  _getStaticImage(GatsbyImageBrowser)\n\nStaticImage.displayName = `StaticImage`\nStaticImage.propTypes = propTypes\n\nexport { StaticImage }\n","'use strict';\n\nconst preserveCamelCase = string => {\n\tlet isLastCharLower = false;\n\tlet isLastCharUpper = false;\n\tlet isLastLastCharUpper = false;\n\n\tfor (let i = 0; i < string.length; i++) {\n\t\tconst character = string[i];\n\n\t\tif (isLastCharLower && /[a-zA-Z]/.test(character) && character.toUpperCase() === character) {\n\t\t\tstring = string.slice(0, i) + '-' + string.slice(i);\n\t\t\tisLastCharLower = false;\n\t\t\tisLastLastCharUpper = isLastCharUpper;\n\t\t\tisLastCharUpper = true;\n\t\t\ti++;\n\t\t} else if (isLastCharUpper && isLastLastCharUpper && /[a-zA-Z]/.test(character) && character.toLowerCase() === character) {\n\t\t\tstring = string.slice(0, i - 1) + '-' + string.slice(i - 1);\n\t\t\tisLastLastCharUpper = isLastCharUpper;\n\t\t\tisLastCharUpper = false;\n\t\t\tisLastCharLower = true;\n\t\t} else {\n\t\t\tisLastCharLower = character.toLowerCase() === character && character.toUpperCase() !== character;\n\t\t\tisLastLastCharUpper = isLastCharUpper;\n\t\t\tisLastCharUpper = character.toUpperCase() === character && character.toLowerCase() !== character;\n\t\t}\n\t}\n\n\treturn string;\n};\n\nconst camelCase = (input, options) => {\n\tif (!(typeof input === 'string' || Array.isArray(input))) {\n\t\tthrow new TypeError('Expected the input to be `string | string[]`');\n\t}\n\n\toptions = Object.assign({\n\t\tpascalCase: false\n\t}, options);\n\n\tconst postProcess = x => options.pascalCase ? x.charAt(0).toUpperCase() + x.slice(1) : x;\n\n\tif (Array.isArray(input)) {\n\t\tinput = input.map(x => x.trim())\n\t\t\t.filter(x => x.length)\n\t\t\t.join('-');\n\t} else {\n\t\tinput = input.trim();\n\t}\n\n\tif (input.length === 0) {\n\t\treturn '';\n\t}\n\n\tif (input.length === 1) {\n\t\treturn options.pascalCase ? input.toUpperCase() : input.toLowerCase();\n\t}\n\n\tconst hasUpperCase = input !== input.toLowerCase();\n\n\tif (hasUpperCase) {\n\t\tinput = preserveCamelCase(input);\n\t}\n\n\tinput = input\n\t\t.replace(/^[_.\\- ]+/, '')\n\t\t.toLowerCase()\n\t\t.replace(/[_.\\- ]+(\\w|$)/g, (_, p1) => p1.toUpperCase())\n\t\t.replace(/\\d+(\\w|$)/g, m => m.toUpperCase());\n\n\treturn postProcess(input);\n};\n\nmodule.exports = camelCase;\n// TODO: Remove this for the next major release\nmodule.exports.default = camelCase;\n"],"names":["DEFAULT_PIXEL_DENSITIES","DEFAULT_BREAKPOINTS","EVERY_BREAKPOINT","warn","message","console","sortNumeric","a","b","getSrcSet","images","map","image","src","width","join","formatFromFilename","filename","dot","lastIndexOf","ext","slice","length","setDefaultDimensions","args","layout","height","sourceMetadata","breakpoints","aspectRatio","formats","format","toLowerCase","camelCase","Math","round","getLowResolutionImageURL","generateImageSource","fit","options","_generateImageSource","generateImageData","Error","pluginName","reporter","backgroundColor","placeholderURL","Set","size","has","delete","add","imageSizes","imgDimensions","erroneousUserDimensions","Object","entries","filter","dim","outputPixelDensities","densities","dedupeAndSortDensities","calculated","getDimensionsAndAspectRatio","originalWidth","fixedDimension","sizes","density","presentationWidth","presentationHeight","unscaledWidth","responsiveImageSizes","calculateImageSizes","result","sources","forEach","imageSrc","Boolean","unscaled","find","img","fallback","srcSet","push","type","imageProps","placeholder","values","Array","from","sort","min","includes","dimensions","imageAspectRatio","widthOption","Number","MAX_SAFE_INTEGER","heightOption","max","hasNativeLazyLoadSupport","HTMLImageElement","prototype","getImage","node","_node$images","_node$images$fallback","gatsbyImageData","gatsbyImage","childImageSharp","_node$childImageSharp","getSrc","_getImage","_getImage$images","_getImage$images$fall","_getImage2","_getImage2$images","_getImage2$images$fal","getImageData","baseUrl","urlBuilder","sourceWidth","sourceHeight","props","_breakpoints","getMainProps","isLoading","isLoaded","loading","style","shouldLoad","opacity","getPlaceholderProps","objectFit","objectPosition","wrapperStyle","position","top","left","bottom","right","transition","withArtDirection","defaultImage","artDirected","output","media","source","fallbackImage","Sizer","React","paddingTop","maxWidth","display","alt","role","LayoutWrapper","children","Fragment","q","H","Image","decoding","undefined","Picture","t","key","propTypes","PropTypes","displayName","isRequired","Placeholder","_Picture$propTypes","propName","componentName","MainImage","renderImageToStringPromise","renderImage","altValidator","rest","imageCache","GatsbyImageHydrator","onError","as","className","preactClass","class","onStartLoad","onLoad","overflow","wStyle","wClass","wrapperProps","root","useRef","cacheKey","useMemo","JSON","stringify","sizer","useEffect","import","then","renderImageToString","swapPlaceholderImage","animationFrame","cleanupCallback","ssrImage","current","querySelector","complete","wasCached","setTimeout","removeAttribute","document","addEventListener","onLoadListener","removeEventListener","innerHTML","requestAnimationFrame","cancelAnimationFrame","useLayoutEffect","createElement","ref","dangerouslySetInnerHTML","__html","suppressHydrationWarning","GatsbyImage","memo","checkDimensionProps","validLayouts","StaticImage","GatsbyImageBrowser","__error","imageData","__imageData","input","isArray","TypeError","assign","pascalCase","x","trim","toUpperCase","string","isLastCharLower","isLastCharUpper","isLastLastCharUpper","i","character","test","preserveCamelCase","replace","_","p1","m","charAt","module","exports"],"sourceRoot":""}